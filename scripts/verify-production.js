#!/usr/bin/env node

console.log('üåê Production SSR Verification');
console.log('==============================');

const BASE_URL = 'https://mentalspacetherapy.lovable.app';

async function verifyProduction() {
  console.log(`Testing: ${BASE_URL}`);
  
  try {
    // Test 1: Homepage renders with content
    console.log('\n1Ô∏è‚É£ Testing homepage rendering...');
    const homeResponse = await fetch(BASE_URL);
    const homeHtml = await homeResponse.text();
    
    const hasTitle = homeHtml.includes('<title>');
    const hasH1 = homeHtml.includes('<h1');
    const hasContent = homeHtml.includes('<p') && homeHtml.length > 5000;
    const hasJsonLd = homeHtml.includes('application/ld+json');
    
    console.log('üè† Homepage analysis:');
    console.log(`  ‚Ä¢ Status: ${homeResponse.status} ${homeResponse.status === 200 ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚Ä¢ Size: ${homeHtml.length} characters`);
    console.log(`  ‚Ä¢ Has title: ${hasTitle ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚Ä¢ Has H1: ${hasH1 ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚Ä¢ Has content: ${hasContent ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚Ä¢ Has JSON-LD: ${hasJsonLd ? '‚úÖ' : '‚ùå'}`);

    // Test 2: Key pages render
    const testRoutes = ['/services', '/online-therapy', '/insights'];
    console.log('\n2Ô∏è‚É£ Testing key pages...');
    
    for (const route of testRoutes) {
      try {
        const response = await fetch(`${BASE_URL}${route}`);
        const html = await response.text();
        const hasContent = html.includes('<h1') && html.includes('<p') && html.length > 3000;
        console.log(`  ‚Ä¢ ${route}: ${response.status} ${hasContent ? '‚úÖ (rendered)' : '‚ùå (spa-only)'}`);
      } catch (err) {
        console.log(`  ‚Ä¢ ${route}: ‚ùå (failed)`);
      }
    }

    // Test 3: Diagnostic endpoints
    console.log('\n3Ô∏è‚É£ Testing diagnostic endpoints...');
    
    try {
      const htmlDiagResponse = await fetch(`${BASE_URL}/__diagnostics/html.txt`);
      console.log(`  ‚Ä¢ HTML diagnostic: ${htmlDiagResponse.status} ${htmlDiagResponse.status === 200 ? '‚úÖ' : '‚ùå'}`);
      
      const seoDiagResponse = await fetch(`${BASE_URL}/__diagnostics/seo.json`);
      console.log(`  ‚Ä¢ SEO diagnostic: ${seoDiagResponse.status} ${seoDiagResponse.status === 200 ? '‚úÖ' : '‚ùå'}`);
      
      if (seoDiagResponse.status === 200) {
        const seoData = await seoDiagResponse.json();
        console.log(`  ‚Ä¢ Environment: ${seoData.environment || 'unknown'}`);
        console.log(`  ‚Ä¢ Routes count: ${seoData.routes_tested || 0}`);
      }
    } catch (err) {
      console.log('  ‚Ä¢ Diagnostics: ‚ùå (not accessible)');
    }

    // Test 4: Robots and sitemap
    console.log('\n4Ô∏è‚É£ Testing SEO files...');
    
    try {
      const robotsResponse = await fetch(`${BASE_URL}/robots.txt`);
      console.log(`  ‚Ä¢ Robots.txt: ${robotsResponse.status} ${robotsResponse.status === 200 ? '‚úÖ' : '‚ùå'}`);
      
      const sitemapResponse = await fetch(`${BASE_URL}/sitemap.xml`);
      console.log(`  ‚Ä¢ Sitemap.xml: ${sitemapResponse.status} ${sitemapResponse.status === 200 ? '‚úÖ' : '‚ùå'}`);
    } catch (err) {
      console.log('  ‚Ä¢ SEO files: ‚ùå (not accessible)');
    }

    console.log('\nüìä Production verification complete!');
    console.log('üí° Check "View Page Source" to verify HTML content is rendered');

  } catch (error) {
    console.error('‚ùå Production verification failed:', error.message);
  }
}

verifyProduction();